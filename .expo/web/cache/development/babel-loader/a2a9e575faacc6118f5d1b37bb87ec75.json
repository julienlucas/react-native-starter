{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/brentvatne/code/react-native-safe-area-view/src/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaContext, SafeAreaProvider, SafeAreaConsumer, useSafeArea } from 'react-native-safe-area-context';\nimport shallowEquals from \"./shallowEquals\";\nexport { useSafeArea, SafeAreaProvider, SafeAreaConsumer, SafeAreaContext };\n\nvar SafeAreaView = function (_React$Component) {\n  _inherits(SafeAreaView, _React$Component);\n\n  function SafeAreaView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SafeAreaView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SafeAreaView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this._isMounted = false;\n    _this._view = React.createRef();\n    _this.state = {\n      touchesTop: true,\n      touchesBottom: true,\n      touchesLeft: true,\n      touchesRight: true,\n      viewWidth: 0,\n      viewHeight: 0\n    };\n\n    _this._handleLayout = function (e) {\n      if (_this.props.onLayout) _this.props.onLayout(e);\n\n      _this._updateMeasurements();\n    };\n\n    _this._updateMeasurements = function () {\n      if (!_this._isMounted) return;\n      if (!_this._view.current) return;\n\n      var _getResolvedDimension = getResolvedDimensions(),\n          WIDTH = _getResolvedDimension.width,\n          HEIGHT = _getResolvedDimension.height;\n\n      var view = _this._view.current.measureInWindow ? _this._view.current : _this._view.current.getNode();\n      view.measureInWindow(function (realX, realY, winWidth, winHeight) {\n        if (!_this._view.current) {\n          return;\n        }\n\n        if (realY >= HEIGHT) {\n          realY = realY % HEIGHT;\n        } else if (realY < 0) {\n          realY = realY % HEIGHT + HEIGHT;\n        }\n\n        if (realX >= WIDTH) {\n          realX = realX % WIDTH;\n        } else if (realX < 0) {\n          realX = realX % WIDTH + WIDTH;\n        }\n\n        var nextState = {\n          touchesTop: realY === 0,\n          touchesBottom: realY + winHeight >= HEIGHT,\n          touchesLeft: realX === 0,\n          touchesRight: realX + winWidth >= WIDTH,\n          viewWidth: winWidth,\n          viewHeight: winHeight\n        };\n\n        if (!shallowEquals(nextState, _this.state)) {\n          _this.setState(nextState);\n        }\n      });\n    };\n\n    _this._getSafeAreaStyle = function () {\n      var _this$state = _this.state,\n          touchesTop = _this$state.touchesTop,\n          touchesBottom = _this$state.touchesBottom,\n          touchesLeft = _this$state.touchesLeft,\n          touchesRight = _this$state.touchesRight;\n      var forceInset = _this.props.forceInset;\n\n      var _this$_getViewStyles = _this._getViewStyles(),\n          paddingTop = _this$_getViewStyles.paddingTop,\n          paddingBottom = _this$_getViewStyles.paddingBottom,\n          paddingLeft = _this$_getViewStyles.paddingLeft,\n          paddingRight = _this$_getViewStyles.paddingRight,\n          viewStyle = _this$_getViewStyles.viewStyle;\n\n      var style = _objectSpread({}, viewStyle, {\n        paddingTop: touchesTop ? _this._getInset('top') : 0,\n        paddingBottom: touchesBottom ? _this._getInset('bottom') : 0,\n        paddingLeft: touchesLeft ? _this._getInset('left') : 0,\n        paddingRight: touchesRight ? _this._getInset('right') : 0\n      });\n\n      if (forceInset && typeof forceInset !== 'boolean') {\n        getKeys(forceInset).forEach(function (key) {\n          var inset = 0;\n\n          if (forceInset[key] === 'always') {\n            inset = _this._getInset(key);\n          } else if (forceInset[key] === 'never') {\n            inset = 0;\n          }\n\n          switch (key) {\n            case 'horizontal':\n              {\n                style.paddingLeft = inset;\n                style.paddingRight = inset;\n                break;\n              }\n\n            case 'vertical':\n              {\n                style.paddingTop = inset;\n                style.paddingBottom = inset;\n                break;\n              }\n\n            case 'left':\n              {\n                style.paddingLeft = inset;\n                break;\n              }\n\n            case 'right':\n              {\n                style.paddingRight = inset;\n                break;\n              }\n\n            case 'top':\n              {\n                style.paddingTop = inset;\n                break;\n              }\n\n            case 'bottom':\n              {\n                style.paddingBottom = inset;\n                break;\n              }\n          }\n        });\n      }\n\n      if (style.height && typeof style.height === 'number') {\n        style.height += style.paddingTop + style.paddingBottom;\n      }\n\n      if (style.width && typeof style.width === 'number') {\n        style.width += style.paddingLeft + style.paddingRight;\n      }\n\n      style.paddingTop = Math.max(style.paddingTop, paddingTop);\n      style.paddingBottom = Math.max(style.paddingBottom, paddingBottom);\n      style.paddingLeft = Math.max(style.paddingLeft, paddingLeft);\n      style.paddingRight = Math.max(style.paddingRight, paddingRight);\n      return style;\n    };\n\n    _this._getViewStyles = function () {\n      var viewWidth = _this.state.viewWidth;\n\n      var _StyleSheet$flatten = StyleSheet.flatten(_this.props.style || {}),\n          _StyleSheet$flatten$p = _StyleSheet$flatten.padding,\n          padding = _StyleSheet$flatten$p === void 0 ? 0 : _StyleSheet$flatten$p,\n          _StyleSheet$flatten$p2 = _StyleSheet$flatten.paddingVertical,\n          paddingVertical = _StyleSheet$flatten$p2 === void 0 ? padding : _StyleSheet$flatten$p2,\n          _StyleSheet$flatten$p3 = _StyleSheet$flatten.paddingHorizontal,\n          paddingHorizontal = _StyleSheet$flatten$p3 === void 0 ? padding : _StyleSheet$flatten$p3,\n          _StyleSheet$flatten$p4 = _StyleSheet$flatten.paddingTop,\n          paddingTop = _StyleSheet$flatten$p4 === void 0 ? paddingVertical : _StyleSheet$flatten$p4,\n          _StyleSheet$flatten$p5 = _StyleSheet$flatten.paddingBottom,\n          paddingBottom = _StyleSheet$flatten$p5 === void 0 ? paddingVertical : _StyleSheet$flatten$p5,\n          _StyleSheet$flatten$p6 = _StyleSheet$flatten.paddingLeft,\n          paddingLeft = _StyleSheet$flatten$p6 === void 0 ? paddingHorizontal : _StyleSheet$flatten$p6,\n          _StyleSheet$flatten$p7 = _StyleSheet$flatten.paddingRight,\n          paddingRight = _StyleSheet$flatten$p7 === void 0 ? paddingHorizontal : _StyleSheet$flatten$p7,\n          viewStyle = _objectWithoutProperties(_StyleSheet$flatten, [\"padding\", \"paddingVertical\", \"paddingHorizontal\", \"paddingTop\", \"paddingBottom\", \"paddingLeft\", \"paddingRight\"]);\n\n      if (typeof paddingTop !== 'number') {\n        paddingTop = doubleFromPercentString(paddingTop) * viewWidth;\n      }\n\n      if (typeof paddingBottom !== 'number') {\n        paddingBottom = doubleFromPercentString(paddingBottom) * viewWidth;\n      }\n\n      if (typeof paddingLeft !== 'number') {\n        paddingLeft = doubleFromPercentString(paddingLeft) * viewWidth;\n      }\n\n      if (typeof paddingRight !== 'number') {\n        paddingRight = doubleFromPercentString(paddingRight) * viewWidth;\n      }\n\n      return {\n        paddingTop: paddingTop,\n        paddingBottom: paddingBottom,\n        paddingLeft: paddingLeft,\n        paddingRight: paddingRight,\n        viewStyle: viewStyle\n      };\n    };\n\n    _this._getInset = function (key) {\n      if (_this.context === null) {\n        throw new Error('<SafeAreaView /> must be wrapped by react-native-safe-area-context <SafeAreaProvider />');\n      } else if (key === 'horizontal') {\n        return Math.max(_this.context.left, _this.context.right);\n      } else if (key === 'vertical') {\n        return Math.max(_this.context.top, _this.context.bottom);\n      } else {\n        return _this.context[key];\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(SafeAreaView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this._isMounted = true;\n      InteractionManager.runAfterInteractions(function () {\n        _this2._updateMeasurements();\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          _this$props$forceInse = _this$props.forceInset,\n          forceInset = _this$props$forceInse === void 0 ? false : _this$props$forceInse,\n          style = _this$props.style,\n          props = _objectWithoutProperties(_this$props, [\"forceInset\", \"style\"]);\n\n      return React.createElement(Animated.View, _extends({\n        ref: this._view,\n        pointerEvents: \"box-none\"\n      }, props, {\n        onLayout: this._handleLayout,\n        style: this._getSafeAreaStyle(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        }\n      }));\n    }\n  }]);\n\n  return SafeAreaView;\n}(React.Component);\n\nSafeAreaView.contextType = SafeAreaContext;\nexport { SafeAreaView as default };\n\nfunction getResolvedDimensions() {\n  var _Dimensions$get = Dimensions.get('window'),\n      width = _Dimensions$get.width,\n      height = _Dimensions$get.height;\n\n  if (width === 0 && height === 0) return Dimensions.get('screen');\n  return {\n    width: width,\n    height: height\n  };\n}\n\nfunction doubleFromPercentString(percent) {\n  if (!percent.includes('%')) {\n    return 0;\n  }\n\n  var dbl = parseFloat(percent) / 100;\n  if (isNaN(dbl)) return 0;\n  return dbl;\n}\n\nfunction getKeys(object) {\n  return Object.keys(object);\n}","map":{"version":3,"sources":["index.tsx"],"names":["SafeAreaView","React","Component","contextType","SafeAreaContext","_isMounted","_view","state","touchesTop","touchesBottom","touchesLeft","touchesRight","viewWidth","viewHeight","InteractionManager","forceInset","style","props","_handleLayout","_updateMeasurements","WIDTH","HEIGHT","getResolvedDimensions","view","realY","realX","nextState","shallowEquals","_getSafeAreaStyle","paddingTop","paddingBottom","paddingLeft","paddingRight","viewStyle","getKeys","inset","Math","_getViewStyles","padding","paddingVertical","paddingHorizontal","StyleSheet","doubleFromPercentString","_getInset","key","width","height","Dimensions","percent","dbl","parseFloat","isNaN","Object"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Dimensions,\n  InteractionManager,\n  LayoutChangeEvent,\n  StyleSheet,\n  View,\n  ViewStyle,\n  ViewProperties,\n} from 'react-native';\nimport {\n  EdgeInsets,\n  SafeAreaContext,\n  SafeAreaProvider,\n  SafeAreaConsumer,\n  useSafeArea,\n} from 'react-native-safe-area-context';\n\nimport shallowEquals from './shallowEquals';\n\n// Re-export react-native-safe-area-context utilities\nexport { useSafeArea, SafeAreaProvider, SafeAreaConsumer, SafeAreaContext };\n\nexport type ForceInsetValue = 'always' | 'never';\nexport type ForceInsetProp = {\n  top?: ForceInsetValue;\n  bottom?: ForceInsetValue;\n  left?: ForceInsetValue;\n  right?: ForceInsetValue;\n  horizontal?: ForceInsetValue;\n  vertical?: ForceInsetValue;\n};\n\ninterface Props extends ViewProperties {\n  forceInset?: ForceInsetProp;\n}\n\ninterface State {\n  touchesTop: boolean;\n  touchesBottom: boolean;\n  touchesLeft: boolean;\n  touchesRight: boolean;\n  viewWidth: number;\n  viewHeight: number;\n}\n\n// https://github.com/facebook/react-native/blob/282b8b04e167cb426e40947064c4c18186e093f5/Libraries/ReactNative/DummyUIManager.js#L64\ninterface AnimatedView extends Animated.AnimatedComponent<View> {\n  measureInWindow: (\n    callback: (x: number, y: number, width: number, height: number) => void\n  ) => void;\n}\n\nexport default class SafeAreaView extends React.Component<Props, State> {\n  static contextType: any = SafeAreaContext;\n  context!: React.ContextType<typeof SafeAreaContext>;\n  private _isMounted: boolean = false;\n  private _view = React.createRef<AnimatedView>();\n\n  state: State = {\n    touchesTop: true,\n    touchesBottom: true,\n    touchesLeft: true,\n    touchesRight: true,\n    viewWidth: 0,\n    viewHeight: 0,\n  };\n\n  componentDidMount() {\n    this._isMounted = true;\n    InteractionManager.runAfterInteractions(() => {\n      this._updateMeasurements();\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const { forceInset = false, style, ...props } = this.props;\n\n    return (\n      <Animated.View\n        // @ts-ignore\n        ref={this._view}\n        pointerEvents=\"box-none\"\n        {...props}\n        onLayout={this._handleLayout}\n        style={this._getSafeAreaStyle()}\n      />\n    );\n  }\n\n  _handleLayout = (e: LayoutChangeEvent) => {\n    if (this.props.onLayout) this.props.onLayout(e);\n\n    this._updateMeasurements();\n  };\n\n  _updateMeasurements = () => {\n    if (!this._isMounted) return;\n    if (!this._view.current) return;\n\n    const { width: WIDTH, height: HEIGHT } = getResolvedDimensions();\n\n    // calling getNode on the ref is no longer necessary in the future\n    const view = this._view.current.measureInWindow\n      ? this._view.current\n      : this._view.current.getNode();\n    view.measureInWindow((realX, realY, winWidth, winHeight) => {\n      if (!this._view.current) {\n        return;\n      }\n\n      if (realY >= HEIGHT) {\n        realY = realY % HEIGHT;\n      } else if (realY < 0) {\n        realY = (realY % HEIGHT) + HEIGHT;\n      }\n\n      if (realX >= WIDTH) {\n        realX = realX % WIDTH;\n      } else if (realX < 0) {\n        realX = (realX % WIDTH) + WIDTH;\n      }\n\n      let nextState = {\n        touchesTop: realY === 0,\n        touchesBottom: realY + winHeight >= HEIGHT,\n        touchesLeft: realX === 0,\n        touchesRight: realX + winWidth >= WIDTH,\n        viewWidth: winWidth,\n        viewHeight: winHeight,\n      };\n\n      if (!shallowEquals(nextState, this.state)) {\n        this.setState(nextState);\n      }\n    });\n  };\n\n  _getSafeAreaStyle = () => {\n    const { touchesTop, touchesBottom, touchesLeft, touchesRight } = this.state;\n    const { forceInset } = this.props;\n\n    const {\n      paddingTop,\n      paddingBottom,\n      paddingLeft,\n      paddingRight,\n      viewStyle,\n    } = this._getViewStyles();\n\n    const style = {\n      ...viewStyle,\n      paddingTop: touchesTop ? this._getInset('top') : 0,\n      paddingBottom: touchesBottom ? this._getInset('bottom') : 0,\n      paddingLeft: touchesLeft ? this._getInset('left') : 0,\n      paddingRight: touchesRight ? this._getInset('right') : 0,\n    };\n\n    if (forceInset && typeof forceInset !== 'boolean') {\n      getKeys(forceInset).forEach(key => {\n        let inset = 0;\n\n        if (forceInset[key] === 'always') {\n          inset = this._getInset(key);\n        } else if (forceInset[key] === 'never') {\n          inset = 0;\n        }\n\n        switch (key) {\n          case 'horizontal': {\n            style.paddingLeft = inset;\n            style.paddingRight = inset;\n            break;\n          }\n          case 'vertical': {\n            style.paddingTop = inset;\n            style.paddingBottom = inset;\n            break;\n          }\n          case 'left': {\n            style.paddingLeft = inset;\n            break;\n          }\n          case 'right': {\n            style.paddingRight = inset;\n            break;\n          }\n          case 'top': {\n            style.paddingTop = inset;\n            break;\n          }\n          case 'bottom': {\n            style.paddingBottom = inset;\n            break;\n          }\n        }\n      });\n    }\n\n    // new height/width should only include padding from insets\n    // height/width should not be affected by padding from style obj\n    if (style.height && typeof style.height === 'number') {\n      style.height += style.paddingTop + style.paddingBottom;\n    }\n\n    if (style.width && typeof style.width === 'number') {\n      style.width += style.paddingLeft + style.paddingRight;\n    }\n\n    style.paddingTop = Math.max(style.paddingTop, paddingTop);\n    style.paddingBottom = Math.max(style.paddingBottom, paddingBottom);\n    style.paddingLeft = Math.max(style.paddingLeft, paddingLeft);\n    style.paddingRight = Math.max(style.paddingRight, paddingRight);\n\n    return style;\n  };\n\n  _getViewStyles = () => {\n    const { viewWidth } = this.state;\n    // get padding values from style to add back in after insets are determined\n    // default precedence: padding[Side] -> vertical | horizontal -> padding -> 0\n    let {\n      padding = 0,\n      paddingVertical = padding,\n      paddingHorizontal = padding,\n      paddingTop = paddingVertical,\n      paddingBottom = paddingVertical,\n      paddingLeft = paddingHorizontal,\n      paddingRight = paddingHorizontal,\n      ...viewStyle\n    }: ViewStyle = StyleSheet.flatten(this.props.style || {});\n\n    if (typeof paddingTop !== 'number') {\n      paddingTop = doubleFromPercentString(paddingTop) * viewWidth;\n    }\n\n    if (typeof paddingBottom !== 'number') {\n      paddingBottom = doubleFromPercentString(paddingBottom) * viewWidth;\n    }\n\n    if (typeof paddingLeft !== 'number') {\n      paddingLeft = doubleFromPercentString(paddingLeft) * viewWidth;\n    }\n\n    if (typeof paddingRight !== 'number') {\n      paddingRight = doubleFromPercentString(paddingRight) * viewWidth;\n    }\n\n    return {\n      paddingTop,\n      paddingBottom,\n      paddingLeft,\n      paddingRight,\n      viewStyle,\n    };\n  };\n\n  _getInset = (key: keyof ForceInsetProp) => {\n    if (this.context === null) {\n      throw new Error(\n        '<SafeAreaView /> must be wrapped by react-native-safe-area-context <SafeAreaProvider />'\n      );\n    } else if (key === 'horizontal') {\n      return Math.max(this.context.left, this.context.right);\n    } else if (key === 'vertical') {\n      return Math.max(this.context.top, this.context.bottom);\n    } else {\n      return this.context[key as keyof EdgeInsets];\n    }\n  };\n}\n\n// note(brentvatne): it is unclear to me why this function exists but I will\n// leave it\nfunction getResolvedDimensions() {\n  const { width, height } = Dimensions.get('window');\n  if (width === 0 && height === 0) return Dimensions.get('screen');\n  return { width, height };\n}\n\n// Convert percentage string, eg: 50%, to double, eg: 0.5\nfunction doubleFromPercentString(percent: string): number {\n  if (!percent.includes('%')) {\n    return 0;\n  }\n\n  const dbl = parseFloat(percent) / 100;\n\n  if (isNaN(dbl)) return 0;\n\n  return dbl;\n}\n\n// Utility to iterate over keys in object and have each key typed\nfunction getKeys<T extends {}>(object: T): Array<keyof T> {\n  return Object.keys(object) as Array<keyof T>;\n}\n"]},"metadata":{},"sourceType":"module"}